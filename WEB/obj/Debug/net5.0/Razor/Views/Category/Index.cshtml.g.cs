#pragma checksum "D:\dotnet\TazeProject\WEB\Views\Category\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "07a05125ade45fb9aaf9736e821b5d178806cee6"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Category_Index), @"mvc.1.0.view", @"/Views/Category/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 2 "D:\dotnet\TazeProject\WEB\Views\_ViewImports.cshtml"
using DTO.UserDtos;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "D:\dotnet\TazeProject\WEB\Views\_ViewImports.cshtml"
using CORE.Prevail;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "D:\dotnet\TazeProject\WEB\Views\_ViewImports.cshtml"
using Domain;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"07a05125ade45fb9aaf9736e821b5d178806cee6", @"/Views/Category/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2feb9c6073f73be7c29f63ad333663b0204dd9e1", @"/Views/_ViewImports.cshtml")]
    public class Views_Category_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\dotnet\TazeProject\WEB\Views\Category\Index.cshtml"
  
    ViewData["Title"] = "Index";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div id=""vm"" v-cloak>
    <div class=""container"">
        <h2 class=""text-center text-dark text-capitalize w-100"">
            Kategori Yönetimi
        </h2>
        <div class=""row"">
            <div class=""col-lg-8 col-md-10 col-sm-12 col-12 offset-lg-2 offset-md-1 py-2"">        
                <div class=""d-flex justify-content-end"">
                    <div class=""p-2 bd-highlight"">
                        <input class=""form-control"" placeholder=""Yeni Kategori"" v-model=""newCategory""/>
                    </div>
                    <div class=""p-2 bd-highlight"">
                        <button class=""btn btn-success"" v-on:click=""insertCategory()"">
                            Kaydet
                        </button>
                    </div>
                </div>
            </div>
            <div class=""col-lg-8 col-md-10 col-sm-12 col-12 offset-lg-2 offset-md-1 py-2"">
                <table class=""table table-hover rounded-3"">
                    <thead class=""bg-success text-");
            WriteLiteral(@"light"">
                        <tr>
                            <th class=""col-3 text-center"">#</th>
                            <th class=""col-3"">Kategori</th>
                            <th class=""col-3"">Eklenme Tarihi</th>
                            <th class=""col-3 text-center"">İşlem</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for=""category, index in categories"" v-bind:key=""index"">
                            <td class=""text-center"">
                                {{index+1}}
                            </td>
                            <td>
                                {{category.Name}}
                            </td>
                            <td>
                                {{category.InsertDate.split('T')[0]}}
                            </td>
                            <td class=""text-center"">
                                <button class=""btn btn-sm btn-outline-danger"" v-on:click=""delete");
            WriteLiteral(@"Category(category.Id, index)"">
                                    Sil
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    const vm = Vue.createApp({
        data() {
            return {
                newCategory: """",
                categories: [],
            }
        },
        created() {
            this.getAll();
        },
        methods: {
            insertCategory() {
                axios.post(""/Service/CategoryApi/Insert"", { categoryName: this.newCategory })
                    .then(resp => {
                        if (resp.data.Success) {
                            this.categories.push(resp.data.Data)
                            Swal.fire(
                                'Yeni Kategori',
                                'Yeni kategori başarıyla eklendi',
                                '");
            WriteLiteral(@"success'
                            )
                        } else {
                            Swal.fire(
                                'Yeni Kategori',
                                'Yeni kategori ekleme sırasında hata olustu',
                                'error'
                            )
                        }
                    })
                    .catch(err => {
                        Swal.fire(
                            'Yeni Kategori',
                            'Yeni kategori ekleme sırasında hata olustu',
                            'error'
                        )
                    })
                    .finally(_ => {

                    })
            },
            deleteCategory(id, index) {
                axios.get(`/Service/CategoryApi/Delete/${id}`)
                    .then(resp => {
                        if (resp.data.Success) {
                            this.categories.splice(index, 1);
                            Swal.fire(
 ");
            WriteLiteral(@"                               'Kategori Silme',
                                'Kategori başarıyla silindi',
                                'success'
                            )
                        } else {
                            Swal.fire(
                                'Kategori Silme',
                                'Kategori silme sırasında hata olustu',
                                'error'
                            )
                        }
                    })
                    .catch(err => {
                        Swal.fire(
                            'Kategori Silme',
                            'Kategori silme sırasında hata olustu',
                            'error'
                        )
                    })
                    .finally(_ => {

                    })
            },
            getAll() {
                axios.get(""/Service/CategoryApi/GetAll"")
                    .then(resp => {
                        if (resp.data.Suc");
            WriteLiteral(@"cess) {
                            console.log(resp.data.Data);
                            this.categories = resp.data.Data;
                        } else {
                            Swal.fire(
                                'Kategorileri Getirme',
                                'Kategorileri getirme sırasında hata olustu',
                                'error'
                            )
                        }
                    })
                    .catch(err => {
                        Swal.fire(
                            'Kategorileri Getirme',
                            'Kategorileri getirme sırasında hata olustu',
                            'error'
                        )
                    })
                    .finally(_ => {

                    })
            }
        }
    }).mount('#vm');
</script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
